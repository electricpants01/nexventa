---
import Chart from 'chart.js/auto'
---

<astro-doc>
  <div class="rounded-md p-6 shadow-md shadow-black/5" style="background-color: #181B3A;">
    <div class="mb-4 flex items-start justify-between">
      <h3 class="text-base font-semibold text-white">Todos los gastos</h3>
      <div class="dropdown">
        <button type="button" class="dropdown-toggle text-gray-400 hover:text-gray-600">
          <button type="button" class="dropdown-toggle text-white hover:text-black">
            <i class="bx bx-dots-vertical-rounded"></i>
          </button></button
        >
        <ul
          class="dropdown-menu z-30 hidden w-full max-w-[140px] rounded-md border border-gray-100 bg-white py-1.5 shadow-md shadow-black/5"
        >
          <li>
            <a
              href="#"
              class="flex items-center px-4 py-1.5 text-[13px] text-gray-600 hover:bg-gray-50 hover:text-blue-500"
              >Profile</a
            >
          </li>
          <li>
            <a
              href="#"
              class="flex items-center px-4 py-1.5 text-[13px] text-gray-600 hover:bg-gray-50 hover:text-blue-500"
              >Settings</a
            >
          </li>
          <li>
            <a
              href="#"
              class="flex items-center px-4 py-1.5 text-[13px] text-gray-600 hover:bg-gray-50 hover:text-blue-500"
              >Logout</a
            >
          </li>
        </ul>
      </div>
    </div>
    <div class="">
      <table class="w-100">
        <table class="w-100">
          <tbody>
            <canvas id="NEXAdminCardExpenses"></canvas>
            <div id="errorMessageExpenses" style="color: red;"></div>
          </tbody>
        </table>
      </table>
    </div>
  </div>
</astro-doc>

<script>
  interface EarningData {
    labels: string[]
    datasets: {
      label: string
      data: number[]
      backgroundColor: string[]
    }[]
  }

  let errorLoadingData = false
  let error: string | null = null

  async function fetchDataAndDrawChart() {
    try {
      const response = await fetch('http://localhost:4321/api/expenses.json')
      if (response.ok) {
        const data: EarningData = await response.json()
        if (data) {
          drawChart(data)
        } else {
          throw new Error('La respuesta está vacía')
        }
      } else if (response.status === 400) {
        throw new Error('Error: Solicitud incorrecta (400)')
      } else if (response.status === 404) {
        throw new Error('Error: Recurso no encontrado (404)')
      } else if (response.status === 500) {
        throw new Error('Error: Error interno del servidor (500)')
      } else {
        throw new Error(
          'Error al cargar los datos. Estado: ' + response.status + ' ' + response.statusText
        )
      }
    } catch (err: any) {
      console.error('Error al obtener los datos de la API:', err.message)
      error = err.message
      errorLoadingData = true
      document.getElementById('errorMessageExpenses')!.innerText = err.message
    }
  }

  function drawChart(data: EarningData) {
    const labels = data.labels
    const datasets = data.datasets
    const backgroundColors = datasets[0].backgroundColor
    // new Chart('NEXAdminCardExpenses', {
    //   type: 'doughnut',
    //   data: {
    //     labels: labels,
    //     datasets: [
    //       {
    //         label: datasets[0].label,
    //         data: datasets[0].data,
    //         backgroundColor: backgroundColors,
    //         borderWidth: 1 // Ajusta el ancho del borde del gráfico
    //       }
    //     ]
    //   },
    //   options: {
    //     responsive: true,
    //     maintainAspectRatio: true,
    //     legend: {
    //       display: true,
    //       position: 'right',
    //       borderRadius: 10,
    //       labels: {
    //         borderRadius: 20
    //       }
    //     },
    //     scales: {
    //       xAxes: [
    //         {
    //           display: false,
    //           ticks: {
    //             fontColor: '#AEAFBB',
    //             fontSize: 14,
    //             fontFamily: 'Arial, sans-serif'
    //           },
    //           gridLines: {
    //             display: false,
    //             color: '#ECECEC'
    //           }
    //         }
    //       ]
    //     }
    //   }
    // })
  }

  fetchDataAndDrawChart()
</script>
